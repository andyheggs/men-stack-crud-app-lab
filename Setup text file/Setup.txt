1. install the Express module
    ``` npm i express```

    1.2 Basic Structure of Express App:

        1.2.1 import modules,  loading Express in s.JS:
            ```
            const express = require("express");
            const app = express();
            app.listen(3000, () => {
                console.log("Listening on port 3000");
            });
            ```

        1.3 Run the Server:
            ``` nodemon```    

2. Install ejs from NPM:
    ``` npm i express```

3. Build the route in s.JS (above app.listen):
    ``` 
        app.get("/", async (req, res) => {
        res.send("hello, friend!");
        });
    ```
4. create views directory:
    ``` mkdir views```

    4.1 add index.ejs file to view dr. for landing page:
    ``` touch views/index.ejs```

    4.2 add HTML into <body> of views .ejs file (update <title> accordinlgy):
    ```
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8" />
            <meta name="viewport" content="width=device-width, initial-scale=1.0" />
            <title>Equities App</title>
        </head>
        <body>
            <h1>Welcome to the Equities app!</h1>
            <p>An app for storing your stock portfolio data.</p>
        </body>
        </html>
    ```    
5. Update the route in s.JS: 
```    
    res.render index.ejs; 
```

6. Connect to MongoDB:

    6.1 install mongoose: 
   
        ```npm i mongoose dotenv```

    6.2 Add the MongoDB Atlas connection string to a .env file 
   
        ```touch .env```

    6.3 Create GitIngnore to ensure .env is added to public domain 
   
        ```touch .gitignore```

    6.4 reference the '.env' and 'node_modules' in the gitignore file. 

    ``` .env
        node_modules
    ```         
    6.5 add MongoDB connection string to the .enc file

    prefix with MONGODB_URI= and add app file name between '/ and ?'

7. MongoDB to s.JS

    7.1 'Require' dotenv package to top of s.JS file:

        ```
        const dotenv = require("dotenv"); // require package
        dotenv.config(); // Loads the environment variables from .env file
        const express = require("express");

        const app = express();

        app.listen(3000, () => {
        console.log("Listening on port 3000");
        });
        ```
    7.2 'Require' mongoose in s.JS file to connect to DB:
        ```
        const mongoose = require("mongoose"); // insert below const express
        ```
    7.3 connect to DB with 'mongoose.connect' method, passing 'MONGODB_URI' argument:
        ```
        mongoose.connect(process.env.MONGODB_URI); //insert below const app = express();
        ```
    7.4 add connection message confirmation evntListner to 'mongoose.connect' method for debugging:

        ```
        mongoose.connection.on("connected", () => {
            console.log(`Connected to MongoDB ${mongoose.connection.name}.`); //insert file name from connection string
        });   
        ```
8. run nodemon to ensure connection

9. Create the model (following steps in model/.js file) 

        9.1 create a directory to hold the model/js file for the app model:
        ```
        mkdir models
        touch models/'name of app'
        ```
        9.2 import mongoose library into new JS file to enable the creaiton of the Schema:
        ```
        const mongoose = require("mongoose");
        ```
        9.3 Create Schema object and keys (data properties): 
        ```
        const equitiesAppSchema = new mongoose.Schema({
            equityName: String,  // Name of the equity
            tickerSymbol: String,  // Ticker symbol 
            currentPrice: Number,  // Current price 
            inPortfolio: Boolean  // Whether the equity is in the user's portfolio
        });
        ```
        9.4 Create & define the model (note naming convention and capitalisation):
        ```
        const EquitiesApp = mongoose.model("EquitiesApp", equitiesAppSchema); 
        ```
        9.5 Export the model to make it avalible to the rest of the application:
        ```
        module.exports = EquitiesApp;
        ```
        9.6 Import model into **s.JS**:
        ```
10. Construct new Route in Express

        10.1  Define and test restful route in s.JS:
        ```
        app.get("/equityApp/new", (req, res) => {
            res.send("This route sends the user a form page!");
        });
        ```
        10.2 create a new template for the new route to add new user documents:
        ```
        mkdir views/equities
        touch views/equities/new.ejs
        ```
        10.3 add boilerplate content to the new.ejs file, (update the title and body accordingly):
        ```
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8" />
            <meta name="viewport" content="width=device-width, initial-scale=1.0" />
            <title>Create an Equity</title>
        </head>
        <body>
            <h1>Create a New Equity!</h1>
        </body>
        </html>  
        ```
        10.4 Replace and test the route in s.JS - render the new.ejs template created in the views/equities directory:
        ```
        app.get("/equitiesApp/new", (req, res) => {
            res.render("equities/new.ejs");
        });
        ```
        10.5 visit http://localhost:3000/equitiesApp/new in the browser to check <h1> rendered to the page.

        10.6 Create a form to the new.ejs template:
        ```
        <body>
            <h1>Create a New Equity!</h1>
            <form action="/equities" method="POST">
                <label for="equityName">Equity Name:</label>
                <input type="text" name="equityName" id="equityName" />

                <label for="tickerSymbol">Ticker Symbol:</label>
                <input type="text" name="tickerSymbol" id="tickerSymbol" />

                <label for="currentPrice">Current Price:</label>
                <input type="number" name="currentPrice" id="currentPrice" step="0.01" />

                <label for="inPortfolio">In Portfolio?</label>
                <input type="checkbox" name="inPortfolio" id="inPortfolio" />

                <button type="submit">Add Equity</button>
            </form>
        </body>
        ```
11. Post Route Restful Form Submission w Middleware

        11.1 Parse form data with express.urlencoded middleware into s.JS:
        ```
        app.use(express.urlencoded({ extended: false }));
        ```
        11.2 defining and testing route into s.JS:
        ```
        app.post("/equities", async (req, res) => {
            console.log(req.body);
            res.redirect("/equities/new");
        });
        ```
        11.3 Build the 'create' functionality:
        ```
        app.post("/equities", async (req, res) => {
            try {
        // Convert inPortfolio to boolean
        const equityData = {
            equityName: req.body.equityName,
            tickerSymbol: req.body.tickerSymbol,
            currentPrice: req.body.currentPrice,
            inPortfolio: req.body.inPortfolio === 'on'
        };

        const newEquity = new EquitiesApp(equityData);
        await newEquity.save();
        console.log(req.body);
        res.redirect("/equities/new");
        } catch (error) {
        console.error("Error saving the equity data:", error);
        res.status(500).send("Error saving the equity data.");
            }
        });
        ```
12.  Develop index route  to retrieve and display DB items

        12.1 definine and test the route in s.JS
        ```
        app.get("/equities", (req, res) => {
            res.send("Welcome to the index page!");
        }); 
        ```
        12.2 Retrieve and 'find' DB data and return array - modify 12.1:
        ```       
        app.get("/equities", async (req, res) => {
            const allEquities = await EquitiesApp.find();
            console.log(allEquities); 
            res.send("Welcome to the index page!");
        });
        ```
        12.3 Render Update route:
        ```
        app.get("/equities", async (req, res) => {
            const allEquities = await EquitiesApp.find();
            res.render("equities/index.ejs", { equities: allEquities });
        });
        ```
        12.4 Create index template in views/equities and add boiler plater html updating the title and body:
        ```
        touch views/equities/index.ejs

        ```
            <!DOCTYPE html>
            <html lang="en">
            <head>
                <meta charset="UTF-8" />
                <meta name="viewport" content="width=device-width, initial-scale=1.0" />
                <title>Equities Index</title>
            </head>
            <body>
                <h1>All Equities</h1>
            </body>
            </html>
            ```
        12.5 - loop over equities in new index.ejs file:
        ```
        <body>
        <h1>All Equities</h1>
        <ul>
            <% equitiesforEach(equity => { %>
            <li><%= equity.name %></li>
            <% }); %>
        </ul>
        </body>
        12.6 Index page user re-direct in s.JS:
        ```
        // POST /equities - to handle form submission and save to database
        app.post("/equities", async (req, res) => {
            try {
                // Convert inPortfolio to boolean
                if (req.body.inPortfolio === "on") {
                    req.body.inPortfolio = true;
                } else {
                    req.body.inPortfolio = false;
                }

                const newEquity = new EquitiesApp(req.body);
                await newEquity.save();
                console.log(req.body);
                res.redirect("/equities"); // redirect to index equities
            } catch (error) {
                console.error("Error saving the equity data:", error);
                res.status(500).send("Error saving the equity data.");
            }
        });

        12.7 add the updated links to the home/index/new equities:

        <!-- views/index.ejs -->
        <a href="/fruits">Browse Fruits</a>


        <!-- views/fruits/index.ejs -->
        <a href="/fruits/new">Add New Fruit</a>

        <!-- views/fruits/new.ejs -->
        <a href="/fruits/">Back to Fruits</a>


















 






